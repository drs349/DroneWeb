import math
import sys
import json

#used for testing
WP1 = [[-71.098084, 42.357606], [-71.098084, 42.357663], [-71.098083, 42.357705], [-71.098083, 42.357755], [-71.098082, 42.357804], [-71.098082, 42.357851], [-71.098081, 42.357899], [-71.098081, 42.357947], [-71.098080, 42.357998], [-71.098080, 42.358050], [-71.098057, 42.357642], [-71.098046, 42.357726], [-71.098044, 42.357780], [-71.098042, 42.357967], [-71.098041, 42.357873], [-71.098041, 42.358017], [-71.098038, 42.357920], [-71.098037, 42.357826], [-71.098030, 42.357678], [-71.098012, 42.357759], [-71.098003, 42.357984], [-71.098000, 42.357717], [-71.097999, 42.357892], [-71.097996, 42.357850], [-71.097996, 42.357942], [-71.097995, 42.357801], [-71.097990, 42.358026], [-71.097978, 42.358069], [-71.097969, 42.357758], [-71.097965, 42.358113], [-71.097963, 42.357985], [-71.097963, 42.357910], [-71.097958, 42.357831], [-71.097950, 42.358161], [-71.097948, 42.358030], [-71.097946, 42.357871], [-71.097945, 42.357948], [-71.097941, 42.357795], [-71.097934, 42.358075], [-71.097926, 42.358130], [-71.097920, 42.357992], [-71.097917, 42.357910], [-71.097910, 42.357837], [-71.097904, 42.358036], [-71.097903, 42.358102], [-71.097898, 42.357954], [-71.097891, 42.357876], [-71.097880, 42.358072], [-71.097876, 42.357998], [-71.097875, 42.357800], [-71.097870, 42.357920], [-71.097862, 42.357841], [-71.097856, 42.358042], [-71.097850, 42.357962], [-71.097842, 42.357888], [-71.097841, 42.357764], [-71.097832, 42.358011], [-71.097826, 42.357804], [-71.097822, 42.357854], [-71.097821, 42.357928], [-71.097812, 42.357733], [-71.097809, 42.357982], [-71.097789, 42.357844], [-71.097789, 42.357896], [-71.097786, 42.357953], [-71.097784, 42.357805], [-71.097780, 42.357768], [-71.097774, 42.357725], [-71.097770, 42.357687], [-71.097749, 42.357927], [-71.097748, 42.357872], [-71.097709, 42.357952], [-71.097708, 42.357899], [-71.097669, 42.357926], [-71.097633, 42.357951]]
WP2 = [(-71.098440, 42.357987), (-71.098418, 42.357954), (-71.098404, 42.357997), (-71.098395, 42.357921), (-71.098378, 42.357964), (-71.098372, 42.357886), (-71.098367, 42.358008), (-71.098355, 42.357928), (-71.098347, 42.357851), (-71.098338, 42.357970), (-71.098332, 42.358018), (-71.098331, 42.357891), (-71.098323, 42.357814), (-71.098314, 42.357931), (-71.098307, 42.357854), (-71.098306, 42.357991), (-71.098297, 42.357777), (-71.098292, 42.358030), (-71.098290, 42.357894), (-71.098289, 42.357961), (-71.098283, 42.357816), (-71.098270, 42.357738), (-71.098268, 42.357928), (-71.098267, 42.357856), (-71.098265, 42.357999), (-71.098259, 42.357776), (-71.098253, 42.358041), (-71.098247, 42.357893), (-71.098246, 42.357703), (-71.098245, 42.357966), (-71.098245, 42.357819), (-71.098225, 42.357856), (-71.098225, 42.357931), (-71.098225, 42.358009), (-71.098225, 42.357741), (-71.098224, 42.357781), (-71.098222, 42.357667), (-71.098215, 42.358052), (-71.098205, 42.357894), (-71.098205, 42.357972), (-71.098204, 42.357818), (-71.098202, 42.357703), (-71.098197, 42.357631), (-71.098189, 42.357776), (-71.098185, 42.358014), (-71.098185, 42.357933), (-71.098184, 42.357855), (-71.098179, 42.357738), (-71.098179, 42.358063), (-71.098178, 42.357666), (-71.098174, 42.357597), (-71.098166, 42.357814), (-71.098165, 42.357972), (-71.098165, 42.357893), (-71.098158, 42.357702), (-71.098153, 42.357566), (-71.098152, 42.357626), (-71.098151, 42.358037), (-71.098149, 42.357775), (-71.098145, 42.357929), (-71.098145, 42.357852), (-71.098140, 42.358003), (-71.098137, 42.358075), (-71.098135, 42.357665), (-71.098135, 42.357738), (-71.098132, 42.357535), (-71.098125, 42.357813), (-71.098124, 42.357586), (-71.098124, 42.357889), (-71.098124, 42.357962), (-71.098115, 42.357702), (-71.098113, 42.357626), (-71.098111, 42.358042), (-71.098108, 42.357775), (-71.098103, 42.357850), (-71.098103, 42.357924), (-71.098101, 42.357996), (-71.098098, 42.358086), (-71.098094, 42.357548), (-71.098094, 42.357665), (-71.098091, 42.357739), (-71.098084, 42.357589), (-71.098084, 42.357812), (-71.098082, 42.357886), (-71.098081, 42.357959), (-71.098076, 42.358025), (-71.098073, 42.357629), (-71.098072, 42.357704), (-71.098067, 42.358061), (-71.098065, 42.357774), (-71.098061, 42.357848), (-71.098060, 42.357922), (-71.098056, 42.357991), (-71.098055, 42.358099), (-71.098053, 42.357561), (-71.098052, 42.357669), (-71.098047, 42.357738), (-71.098042, 42.357811), (-71.098041, 42.357599), (-71.098039, 42.357885), (-71.098037, 42.357957), (-71.098036, 42.358031), (-71.098033, 42.357636), (-71.098027, 42.357701), (-71.098024, 42.358070), (-71.098022, 42.357773), (-71.098019, 42.357847), (-71.098017, 42.357921), (-71.098015, 42.357996), (-71.098014, 42.358111), (-71.098010, 42.357574), (-71.098007, 42.357664), (-71.098003, 42.357736), (-71.097999, 42.357809), (-71.097998, 42.357619), (-71.097997, 42.357884), (-71.097996, 42.358038), (-71.097995, 42.357960), (-71.097983, 42.357699), (-71.097982, 42.358080), (-71.097979, 42.357771), (-71.097977, 42.357846), (-71.097975, 42.357922), (-71.097975, 42.358001), (-71.097974, 42.358122), (-71.097971, 42.357587), (-71.097968, 42.357660), (-71.097959, 42.357732), (-71.097957, 42.357626), (-71.097957, 42.357808), (-71.097957, 42.358043), (-71.097955, 42.357884), (-71.097955, 42.357962), (-71.097941, 42.358085), (-71.097941, 42.357691), (-71.097937, 42.357769), (-71.097937, 42.358133), (-71.097936, 42.358002), (-71.097935, 42.357845), (-71.097935, 42.357922), (-71.097930, 42.357600), (-71.097923, 42.357649), (-71.097918, 42.357730), (-71.097918, 42.358042), (-71.097915, 42.357961), (-71.097915, 42.357807), (-71.097914, 42.357883), (-71.097908, 42.358108), (-71.097901, 42.357691), (-71.097897, 42.357998), (-71.097896, 42.357768), (-71.097895, 42.358074), (-71.097894, 42.357920), (-71.097894, 42.358145), (-71.097894, 42.357844), (-71.097894, 42.357612), (-71.097884, 42.357655), (-71.097877, 42.358032), (-71.097877, 42.357731), (-71.097875, 42.357958), (-71.097873, 42.357881), (-71.097873, 42.357804), (-71.097866, 42.358113), (-71.097859, 42.357695), (-71.097856, 42.358067), (-71.097856, 42.357624), (-71.097855, 42.357993), (-71.097854, 42.358157), (-71.097853, 42.357918), (-71.097853, 42.357765), (-71.097852, 42.357842), (-71.097844, 42.357663), (-71.097834, 42.358029), (-71.097833, 42.357955), (-71.097832, 42.357726), (-71.097832, 42.357880), (-71.097832, 42.357803), (-71.097831, 42.358096), (-71.097823, 42.358132), (-71.097815, 42.357637), (-71.097812, 42.357992), (-71.097812, 42.357685), (-71.097811, 42.357765), (-71.097811, 42.357917), (-71.097811, 42.358169), (-71.097811, 42.358062), (-71.097811, 42.357841), (-71.097792, 42.357727), (-71.097791, 42.358102), (-71.097791, 42.357954), (-71.097790, 42.358027), (-71.097790, 42.357878), (-71.097790, 42.357803), (-71.097780, 42.357648), (-71.097779, 42.358141), (-71.097773, 42.357691), (-71.097770, 42.358181), (-71.097770, 42.357991), (-71.097770, 42.357916), (-71.097769, 42.358067), (-71.097769, 42.357766), (-71.097768, 42.357839), (-71.097751, 42.358108), (-71.097749, 42.357731), (-71.097749, 42.357954), (-71.097749, 42.358031), (-71.097748, 42.357877), (-71.097746, 42.357801), (-71.097743, 42.357660), (-71.097737, 42.358150), (-71.097732, 42.357699), (-71.097730, 42.358193), (-71.097729, 42.358072), (-71.097728, 42.357993), (-71.097728, 42.357915), (-71.097727, 42.357839), (-71.097724, 42.357762), (-71.097711, 42.358114), (-71.097709, 42.358033), (-71.097708, 42.357954), (-71.097707, 42.357877), (-71.097705, 42.357800), (-71.097703, 42.357673), (-71.097701, 42.357721), (-71.097697, 42.358156), (-71.097693, 42.358204), (-71.097690, 42.358073), (-71.097688, 42.357993), (-71.097687, 42.357915), (-71.097685, 42.357839), (-71.097683, 42.357763), (-71.097673, 42.358113), (-71.097669, 42.358032), (-71.097669, 42.357684), (-71.097667, 42.357954), (-71.097665, 42.357876), (-71.097664, 42.358178), (-71.097663, 42.357801), (-71.097662, 42.357726), (-71.097651, 42.358070), (-71.097650, 42.358216), (-71.097650, 42.358144), (-71.097647, 42.357993), (-71.097646, 42.357915), (-71.097643, 42.357837), (-71.097640, 42.357766), (-71.097631, 42.358103), (-71.097631, 42.357696), (-71.097628, 42.358030), (-71.097626, 42.357954), (-71.097624, 42.357876), (-71.097622, 42.358183), (-71.097621, 42.357734), (-71.097618, 42.357797), (-71.097611, 42.358227), (-71.097610, 42.358138), (-71.097607, 42.358066), (-71.097606, 42.357993), (-71.097605, 42.357916), (-71.097602, 42.357838), (-71.097591, 42.357709), (-71.097591, 42.357757), (-71.097587, 42.358101), (-71.097586, 42.358166), (-71.097585, 42.358030), (-71.097585, 42.357955), (-71.097584, 42.357878), (-71.097580, 42.358202), (-71.097579, 42.357798), (-71.097569, 42.358240), (-71.097564, 42.357918), (-71.097564, 42.358133), (-71.097563, 42.358066), (-71.097563, 42.357994), (-71.097562, 42.357841), (-71.097555, 42.357720), (-71.097551, 42.357762), (-71.097546, 42.358172), (-71.097543, 42.357882), (-71.097543, 42.357958), (-71.097541, 42.358031), (-71.097541, 42.358100), (-71.097540, 42.357805), (-71.097537, 42.358211), (-71.097529, 42.358251), (-71.097522, 42.357922), (-71.097522, 42.357847), (-71.097521, 42.358139), (-71.097520, 42.357995), (-71.097518, 42.358067), (-71.097517, 42.357732), (-71.097510, 42.357773), (-71.097506, 42.358179), (-71.097502, 42.357886), (-71.097500, 42.357959), (-71.097500, 42.357812), (-71.097497, 42.358104), (-71.097497, 42.358032), (-71.097497, 42.358220), (-71.097490, 42.358263), (-71.097481, 42.357853), (-71.097480, 42.358144), (-71.097479, 42.357923), (-71.097477, 42.357745), (-71.097476, 42.357997), (-71.097474, 42.358070), (-71.097466, 42.357783), (-71.097466, 42.358185), (-71.097460, 42.357820), (-71.097458, 42.358226), (-71.097457, 42.357886), (-71.097457, 42.357960), (-71.097455, 42.358109), (-71.097453, 42.358035), (-71.097453, 42.358273), (-71.097438, 42.358150), (-71.097437, 42.357922), (-71.097435, 42.357849), (-71.097434, 42.357759), (-71.097434, 42.357999), (-71.097431, 42.358074), (-71.097428, 42.358246), (-71.097426, 42.358191), (-71.097424, 42.357803), (-71.097416, 42.357959), (-71.097415, 42.357884), (-71.097412, 42.358115), (-71.097411, 42.358038), (-71.097404, 42.358221), (-71.097397, 42.358157), (-71.097396, 42.357843), (-71.097395, 42.357771), (-71.097395, 42.357919), (-71.097393, 42.357996), (-71.097388, 42.358079), (-71.097383, 42.357809), (-71.097378, 42.358193), (-71.097376, 42.357957), (-71.097373, 42.357876), (-71.097373, 42.358032), (-71.097372, 42.358125), (-71.097357, 42.357915), (-71.097353, 42.357785), (-71.097352, 42.358063), (-71.097352, 42.358165), (-71.097350, 42.357994), (-71.097350, 42.357832), (-71.097343, 42.358100), (-71.097337, 42.357956), (-71.097335, 42.357874), (-71.097328, 42.358029), (-71.097326, 42.358138), (-71.097319, 42.357914), (-71.097316, 42.357797), (-71.097312, 42.358069), (-71.097309, 42.357839), (-71.097305, 42.357995), (-71.097302, 42.357954), (-71.097299, 42.358109), (-71.097294, 42.357881), (-71.097287, 42.358037), (-71.097278, 42.357923), (-71.097277, 42.357809), (-71.097271, 42.358078), (-71.097268, 42.357969), (-71.097267, 42.357851), (-71.097260, 42.358009), (-71.097253, 42.357893), (-71.097244, 42.358050), (-71.097241, 42.357937), (-71.097237, 42.357822), (-71.097229, 42.357980), (-71.097226, 42.357864), (-71.097217, 42.358021), (-71.097214, 42.357907), (-71.097201, 42.357949), (-71.097196, 42.357835), (-71.097188, 42.357990), (-71.097186, 42.357877), (-71.097174, 42.357919), (-71.097161, 42.357961), (-71.097157, 42.357848), (-71.097146, 42.357890), (-71.097133, 42.357932), (-71.097117, 42.357860), (-71.097106, 42.357902), (-71.097078, 42.357873)]

##TODO
## Reduce runtime by running naive sort on list to better sort the blocks
##      should be simple implementation where sort is done on longitude and
##      then the separation into blocks can be done much faster.
## Check O(sortWPList).
## Find optimum k value.



def sortWPList(WP, radius):
    # input form: [newWP,WPx, WPy, lonListx, lonListy] = sortWPList(WP1, k)
    earthRadius = 6371000
    #initial sort on Longitude i.e. from west to east that separates into blocks
    width = .9*radius/earthRadius*180.00/math.pi
    numBlocks = int(math.ceil((maxByIndex(WP,0)-minByIndex(WP,0))/width))#number of
    #blocks based on width of block and the farthest points peppendicular
    #to direction of block
    westLon = minByIndex(WP,0) #westmost Longitude
    Blocks = []
    temp = WP[:]
    #numWP = len(WP)
    #print 'The num of Blocks is' + str(numBlocks)
    for i in range(numBlocks):
        #print i+1
        Blocks.append([])
        eastLon = westLon+width
        for wp in temp:
            #print wp
            #print westLon<=wp[0]<eastLon
            if westLon<=wp[0]<eastLon:
                Blocks[i].append(wp)
                #print 'the pont ' + str(wp) + ' added'
                #print 'num points left is ' + str(len(temp))
##            else:
##                print '///////the pont ' + str(wp) + ' not added'
        westLon = eastLon
    #print '//////'+str(temp)+'/////////'
    #print Blocks
    #now sort by lattitude within each block
    newWP = []
    j=0
    for block in Blocks:
        block.sort( key=lambda x:x[1])    # sort each block by lat
        if j==0:
            block.reverse()              # reverse every other block to
            j=1                         # snake through the path
        else:
            j=0
        for x in block:
            newWP.append(x)             #add the WPs to the list
    #print eastLon
    ##below section for easy plotting using matplotlib i.e. plot(WPx,WPy)
    WPx = [x for (x,y) in newWP]
    WPy = [y for (x,y) in newWP]

    #print newWP, WPx, WPy
    print newWP

def calcDist(newWP):
    dist = 0
    for i in range(len(newWP)-1):
        dist+=math.sqrt((newWP[i][0]-newWP[i+1][0])**2+(newWP[i][1]-newWP[i+1][1])**2)
    return dist


def minByIndex(X,i):
    #X is some list of tuples
    #i is the index of the tuple to minimize on
    #method returns the minimum value of X(j)(i)
    #where j is any index that points to some tuple in the list X
    minVal = 100000 #arbitrarily large number
    for x in X:
        if x[i] < minVal:
            minVal = x[i]
    return minVal

def maxByIndex(X,i):
    #X is some list of tuples
    #i is the index of the tuple to minimize on
    #method returns the maximum value of X(j)(i)
    #where j is any index that points to some tuple in the list X
    maxVal = -100000 #arbitrarily small number
    for x in X:
        if x[i] > maxVal:
            maxVal = x[i]
    return maxVal

##def DividePathDist(newWP, distance):
##    ##breaks path up into segments of inputed distance that the UAV can go
##    temp = []
##    for i in range(len(newWP)):

def DividePathNum(newWP, num):
    ##breaks path up into segments of inputed # of WPs that the UAV can go
    temp = []
    droneNum = 0
    count = 0
    while i < range(len(newWP)):
        count+=1
        if count < 30:
            

if __name__ == '__main__':
    print type(sys.argv[1])
    WP = json.loads(sys.argv[1])
    radius = float(sys.argv[2])
    sys.stdout.write(str(sortWPList(WP,radius)))
